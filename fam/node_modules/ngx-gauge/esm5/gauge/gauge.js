/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation, Renderer, ElementRef, ViewChild, ContentChild } from '@angular/core';
import { clamp, coerceBooleanProperty, coerceNumberProperty, cssUnit, isNumber } from '../common/util';
import { NgxGaugeLabel, NgxGaugeValue, NgxGaugePrepend, NgxGaugeAppend } from './gauge-directives';
/** @type {?} */
var DEFAULTS = {
    MIN: 0,
    MAX: 100,
    TYPE: 'arch',
    THICK: 4,
    FOREGROUND_COLOR: 'rgba(0, 150, 136, 1)',
    BACKGROUND_COLOR: 'rgba(0, 0, 0, 0.1)',
    CAP: 'butt',
    SIZE: 200
};
var NgxGauge = /** @class */ (function () {
    function NgxGauge(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._size = DEFAULTS.SIZE;
        this._min = DEFAULTS.MIN;
        this._max = DEFAULTS.MAX;
        this._animate = true;
        this._initialized = false;
        this._animationRequestID = 0;
        this.max = DEFAULTS.MAX;
        this.type = (/** @type {?} */ (DEFAULTS.TYPE));
        this.cap = (/** @type {?} */ (DEFAULTS.CAP));
        this.thick = DEFAULTS.THICK;
        this.foregroundColor = DEFAULTS.FOREGROUND_COLOR;
        this.backgroundColor = DEFAULTS.BACKGROUND_COLOR;
        this.thresholds = Object.create(null);
        this._value = 0;
        this.duration = 1200;
    }
    Object.defineProperty(NgxGauge.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () { return this._size; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxGauge.prototype, "min", {
        get: /**
         * @return {?}
         */
        function () { return this._min; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._min = coerceNumberProperty(value, DEFAULTS.MIN);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxGauge.prototype, "animate", {
        get: /**
         * @return {?}
         */
        function () { return this._animate; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._animate = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxGauge.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () { return this._value; },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = coerceNumberProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxGauge.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var isTextChanged = changes['label'] || changes['append'] || changes['prepend'];
        /** @type {?} */
        var isDataChanged = changes['value'] || changes['min'] || changes['max'];
        if (this._initialized) {
            if (isDataChanged) {
                /** @type {?} */
                var nv = void 0;
                /** @type {?} */
                var ov = void 0;
                if (changes['value']) {
                    nv = changes['value'].currentValue;
                    ov = changes['value'].previousValue;
                }
                this._update(nv, ov);
            }
            else if (!isTextChanged) {
                this._destroy();
                this._init();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxGauge.prototype._updateSize = /**
     * @private
     * @return {?}
     */
    function () {
        this._renderer.setElementStyle(this._elementRef.nativeElement, 'width', cssUnit(this._size));
        this._renderer.setElementStyle(this._elementRef.nativeElement, 'height', cssUnit(this._size));
    };
    /**
     * @return {?}
     */
    NgxGauge.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this._canvas) {
            this._init();
        }
    };
    /**
     * @return {?}
     */
    NgxGauge.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroy();
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    NgxGauge.prototype._getBounds = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        /** @type {?} */
        var head;
        /** @type {?} */
        var tail;
        if (type == 'semi') {
            head = Math.PI;
            tail = 2 * Math.PI;
        }
        else if (type == 'full') {
            head = 1.5 * Math.PI;
            tail = 3.5 * Math.PI;
        }
        else if (type === 'arch') {
            head = 0.8 * Math.PI;
            tail = 2.2 * Math.PI;
        }
        return { head: head, tail: tail };
    };
    /**
     * @private
     * @param {?} start
     * @param {?} middle
     * @param {?} tail
     * @param {?} color
     * @return {?}
     */
    NgxGauge.prototype._drawShell = /**
     * @private
     * @param {?} start
     * @param {?} middle
     * @param {?} tail
     * @param {?} color
     * @return {?}
     */
    function (start, middle, tail, color) {
        /** @type {?} */
        var center = this._getCenter();
        /** @type {?} */
        var radius = this._getRadius();
        middle = Math.max(middle, start); // never below 0%
        middle = Math.min(middle, tail); // never exceed 100%
        this._clear();
        this._context.beginPath();
        this._context.strokeStyle = this.backgroundColor;
        this._context.arc(center.x, center.y, radius, middle, tail, false);
        this._context.stroke();
        this._context.beginPath();
        this._context.strokeStyle = color;
        this._context.arc(center.x, center.y, radius, start, middle, false);
        this._context.stroke();
    };
    /**
     * @private
     * @return {?}
     */
    NgxGauge.prototype._clear = /**
     * @private
     * @return {?}
     */
    function () {
        this._context.clearRect(0, 0, this._getWidth(), this._getHeight());
    };
    /**
     * @private
     * @return {?}
     */
    NgxGauge.prototype._getWidth = /**
     * @private
     * @return {?}
     */
    function () {
        return this.size;
    };
    /**
     * @private
     * @return {?}
     */
    NgxGauge.prototype._getHeight = /**
     * @private
     * @return {?}
     */
    function () {
        return this.size;
    };
    /**
     * @private
     * @return {?}
     */
    NgxGauge.prototype._getRadius = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var center = this._getCenter();
        return center.x - this.thick;
    };
    /**
     * @private
     * @return {?}
     */
    NgxGauge.prototype._getCenter = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var x = this._getWidth() / 2;
        /** @type {?} */
        var y = this._getHeight() / 2;
        return { x: x, y: y };
    };
    /**
     * @private
     * @return {?}
     */
    NgxGauge.prototype._init = /**
     * @private
     * @return {?}
     */
    function () {
        this._context = ((/** @type {?} */ (this._canvas.nativeElement))).getContext('2d');
        this._initialized = true;
        this._updateSize();
        this._setupStyles();
        this._create();
    };
    /**
     * @private
     * @return {?}
     */
    NgxGauge.prototype._destroy = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._animationRequestID) {
            window.cancelAnimationFrame(this._animationRequestID);
            this._animationRequestID = 0;
        }
        this._clear();
        this._context = null;
    };
    /**
     * @private
     * @return {?}
     */
    NgxGauge.prototype._setupStyles = /**
     * @private
     * @return {?}
     */
    function () {
        this._context.canvas.width = this.size;
        this._context.canvas.height = this.size;
        this._context.lineCap = this.cap;
        this._context.lineWidth = this.thick;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    NgxGauge.prototype._getForegroundColorByRange = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var match = Object.keys(this.thresholds)
            .filter(function (item) { return isNumber(item) && Number(item) <= value; })
            .sort(function (a, b) { return Number(a) - Number(b); })
            .reverse()[0];
        return match !== undefined
            ? this.thresholds[match].color || this.foregroundColor
            : this.foregroundColor;
    };
    /**
     * @private
     * @param {?=} nv
     * @param {?=} ov
     * @return {?}
     */
    NgxGauge.prototype._create = /**
     * @private
     * @param {?=} nv
     * @param {?=} ov
     * @return {?}
     */
    function (nv, ov) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var type = this.type;
        /** @type {?} */
        var bounds = this._getBounds(type);
        /** @type {?} */
        var duration = this.duration;
        /** @type {?} */
        var min = this.min;
        /** @type {?} */
        var max = this.max;
        /** @type {?} */
        var value = clamp(this.value, this.min, this.max);
        /** @type {?} */
        var start = bounds.head;
        /** @type {?} */
        var unit = (bounds.tail - bounds.head) / (max - min);
        /** @type {?} */
        var displacement = unit * (value - min);
        /** @type {?} */
        var tail = bounds.tail;
        /** @type {?} */
        var color = this._getForegroundColorByRange(value);
        /** @type {?} */
        var startTime;
        /**
         * @param {?} timestamp
         * @return {?}
         */
        function animate(timestamp) {
            timestamp = timestamp || new Date().getTime();
            /** @type {?} */
            var runtime = timestamp - startTime;
            /** @type {?} */
            var progress = Math.min(runtime / duration, 1);
            /** @type {?} */
            var previousProgress = ov ? ov * unit : 0;
            /** @type {?} */
            var middle = start + previousProgress + displacement * progress;
            self._drawShell(start, middle, tail, color);
            if (self._animationRequestID && (runtime < duration)) {
                self._animationRequestID = window.requestAnimationFrame(function (timestamp) { return animate(timestamp); });
            }
            else {
                window.cancelAnimationFrame(self._animationRequestID);
            }
        }
        if (this._animate) {
            if (nv != undefined && ov != undefined) {
                displacement = unit * nv - unit * ov;
            }
            self._animationRequestID = window.requestAnimationFrame(function (timestamp) {
                startTime = timestamp || new Date().getTime();
                animate(timestamp);
            });
        }
        else {
            self._drawShell(start, start + displacement, tail, color);
        }
    };
    /**
     * @private
     * @param {?} nv
     * @param {?} ov
     * @return {?}
     */
    NgxGauge.prototype._update = /**
     * @private
     * @param {?} nv
     * @param {?} ov
     * @return {?}
     */
    function (nv, ov) {
        this._clear();
        this._create(nv, ov);
    };
    NgxGauge.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-gauge',
                    template: "<div class=\"reading-block\" #reading [style.fontSize]=\"size * 0.22 + 'px'\" [style.lineHeight]=\"size + 'px'\">\r\n  <!-- This block can not be indented correctly, because line breaks cause layout spacing, related problem: https://pt.stackoverflow.com/q/276760/2998 -->\r\n  <u class=\"reading-affix\" [ngSwitch]=\"_prependChild != null\"><ng-content select=\"ngx-gauge-prepend\" *ngSwitchCase=\"true\"></ng-content><ng-container *ngSwitchCase=\"false\">{{prepend}}</ng-container></u><ng-container [ngSwitch]=\"_valueDisplayChild != null\"><ng-content *ngSwitchCase=\"true\" select=\"ngx-gauge-value\"></ng-content><ng-container *ngSwitchCase=\"false\">{{value | number}}</ng-container></ng-container><u class=\"reading-affix\" [ngSwitch]=\"_appendChild != null\"><ng-content select=\"ngx-gauge-append\" *ngSwitchCase=\"true\"></ng-content><ng-container *ngSwitchCase=\"false\">{{append}}</ng-container></u>\r\n</div>\r\n<div class=\"reading-label\" \r\n     [style.fontSize]=\"size / 13 + 'px'\" \r\n     [style.lineHeight]=\"(5 * size / 13) + size + 'px'\" \r\n     [ngSwitch]=\"_labelChild != null\">\r\n  <ng-content select=\"ngx-gauge-label\" *ngSwitchCase=\"true\"></ng-content>\r\n  <ng-container *ngSwitchCase=\"false\">{{label}}</ng-container>\r\n</div>\r\n<canvas #canvas [width]=\"size\" [height]=\"size\"></canvas>",
                    host: {
                        'role': 'meter',
                        '[class.ngx-gauge-meter]': 'true',
                        '[attr.aria-valuemin]': 'min',
                        '[attr.aria-valuemax]': 'max',
                        '[attr.aria-valuenow]': 'value'
                    },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".ngx-gauge-meter{display:inline-block;text-align:center;position:relative}.reading-block{position:absolute;width:100%;font-weight:400;white-space:nowrap;text-align:center;overflow:hidden;text-overflow:ellipsis}.reading-label{font-family:inherit;width:100%;display:inline-block;position:absolute;text-align:center;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;font-weight:400}.reading-affix{text-decoration:none;font-size:.6em;opacity:.8;font-weight:200;padding:0 .18em}.reading-affix:first-child{padding-left:0}.reading-affix:last-child{padding-right:0}"]
                }] }
    ];
    /** @nocollapse */
    NgxGauge.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer }
    ]; };
    NgxGauge.propDecorators = {
        _canvas: [{ type: ViewChild, args: ['canvas',] }],
        _labelChild: [{ type: ContentChild, args: [NgxGaugeLabel,] }],
        _prependChild: [{ type: ContentChild, args: [NgxGaugePrepend,] }],
        _appendChild: [{ type: ContentChild, args: [NgxGaugeAppend,] }],
        _valueDisplayChild: [{ type: ContentChild, args: [NgxGaugeValue,] }],
        size: [{ type: Input }],
        min: [{ type: Input }],
        animate: [{ type: Input }],
        max: [{ type: Input }],
        type: [{ type: Input }],
        cap: [{ type: Input }],
        thick: [{ type: Input }],
        label: [{ type: Input }],
        append: [{ type: Input }],
        prepend: [{ type: Input }],
        foregroundColor: [{ type: Input }],
        backgroundColor: [{ type: Input }],
        thresholds: [{ type: Input }],
        value: [{ type: Input }],
        duration: [{ type: Input }]
    };
    return NgxGauge;
}());
export { NgxGauge };
if (false) {
    /** @type {?} */
    NgxGauge.prototype._canvas;
    /** @type {?} */
    NgxGauge.prototype._labelChild;
    /** @type {?} */
    NgxGauge.prototype._prependChild;
    /** @type {?} */
    NgxGauge.prototype._appendChild;
    /** @type {?} */
    NgxGauge.prototype._valueDisplayChild;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._size;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._min;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._max;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._animate;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._initialized;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._context;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._animationRequestID;
    /** @type {?} */
    NgxGauge.prototype.max;
    /** @type {?} */
    NgxGauge.prototype.type;
    /** @type {?} */
    NgxGauge.prototype.cap;
    /** @type {?} */
    NgxGauge.prototype.thick;
    /** @type {?} */
    NgxGauge.prototype.label;
    /** @type {?} */
    NgxGauge.prototype.append;
    /** @type {?} */
    NgxGauge.prototype.prepend;
    /** @type {?} */
    NgxGauge.prototype.foregroundColor;
    /** @type {?} */
    NgxGauge.prototype.backgroundColor;
    /** @type {?} */
    NgxGauge.prototype.thresholds;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._value;
    /** @type {?} */
    NgxGauge.prototype.duration;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    NgxGauge.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZ2F1Z2UvIiwic291cmNlcyI6WyJnYXVnZS9nYXVnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxLQUFLLEVBRUwsaUJBQWlCLEVBQ2pCLFFBQVEsRUFFUixVQUFVLEVBR1YsU0FBUyxFQUNULFlBQVksRUFDZixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQ0gsS0FBSyxFQUNMLHFCQUFxQixFQUNyQixvQkFBb0IsRUFDcEIsT0FBTyxFQUNQLFFBQVEsRUFDWCxNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7SUFFN0YsUUFBUSxHQUFHO0lBQ2IsR0FBRyxFQUFFLENBQUM7SUFDTixHQUFHLEVBQUUsR0FBRztJQUNSLElBQUksRUFBRSxNQUFNO0lBQ1osS0FBSyxFQUFFLENBQUM7SUFDUixnQkFBZ0IsRUFBRSxzQkFBc0I7SUFDeEMsZ0JBQWdCLEVBQUUsb0JBQW9CO0lBQ3RDLEdBQUcsRUFBRSxNQUFNO0lBQ1gsSUFBSSxFQUFFLEdBQUc7Q0FDWjtBQUtEO0lBOEVJLGtCQUFvQixXQUF1QixFQUFVLFNBQW1CO1FBQXBELGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBVTtRQXhEaEUsVUFBSyxHQUFXLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDOUIsU0FBSSxHQUFXLFFBQVEsQ0FBQyxHQUFHLENBQUM7UUFDNUIsU0FBSSxHQUFXLFFBQVEsQ0FBQyxHQUFHLENBQUM7UUFDNUIsYUFBUSxHQUFZLElBQUksQ0FBQztRQUV6QixpQkFBWSxHQUFZLEtBQUssQ0FBQztRQUU5Qix3QkFBbUIsR0FBVyxDQUFDLENBQUM7UUFtQi9CLFFBQUcsR0FBVyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBRTNCLFNBQUks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YSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2lCQUN4Qzs7OztnQkExQ0csVUFBVTtnQkFGVixRQUFROzs7MEJBK0NQLFNBQVMsU0FBQyxRQUFROzhCQUVsQixZQUFZLFNBQUMsYUFBYTtnQ0FDMUIsWUFBWSxTQUFDLGVBQWU7K0JBQzVCLFlBQVksU0FBQyxjQUFjO3FDQUMzQixZQUFZLFNBQUMsYUFBYTt1QkFXMUIsS0FBSztzQkFNTCxLQUFLOzBCQUtMLEtBQUs7c0JBTUwsS0FBSzt1QkFFTCxLQUFLO3NCQUVMLEtBQUs7d0JBRUwsS0FBSzt3QkFFTCxLQUFLO3lCQUVMLEtBQUs7MEJBRUwsS0FBSztrQ0FFTCxLQUFLO2tDQUVMLEtBQUs7NkJBRUwsS0FBSzt3QkFJTCxLQUFLOzJCQU1MLEtBQUs7O0lBb0xWLGVBQUM7Q0FBQSxBQWhRRCxJQWdRQztTQW5QWSxRQUFROzs7SUFFakIsMkJBQXlDOztJQUV6QywrQkFBd0Q7O0lBQ3hELGlDQUE4RDs7SUFDOUQsZ0NBQTJEOztJQUMzRCxzQ0FBK0Q7Ozs7O0lBRS9ELHlCQUFzQzs7Ozs7SUFDdEMsd0JBQW9DOzs7OztJQUNwQyx3QkFBb0M7Ozs7O0lBQ3BDLDRCQUFpQzs7Ozs7SUFFakMsZ0NBQXNDOzs7OztJQUN0Qyw0QkFBMkM7Ozs7O0lBQzNDLHVDQUF3Qzs7SUFtQnhDLHVCQUFvQzs7SUFFcEMsd0JBQTREOztJQUU1RCx1QkFBd0Q7O0lBRXhELHlCQUF3Qzs7SUFFeEMseUJBQXVCOztJQUV2QiwwQkFBd0I7O0lBRXhCLDJCQUF5Qjs7SUFFekIsbUNBQTZEOztJQUU3RCxtQ0FBNkQ7O0lBRTdELDhCQUFrRDs7Ozs7SUFFbEQsMEJBQTJCOztJQVEzQiw0QkFBaUM7Ozs7O0lBRXJCLCtCQUErQjs7Ozs7SUFBRSw2QkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgSW5wdXQsXHJcbiAgICBTaW1wbGVDaGFuZ2VzLFxyXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXHJcbiAgICBSZW5kZXJlcixcclxuICAgIEFmdGVyVmlld0luaXQsXHJcbiAgICBFbGVtZW50UmVmLFxyXG4gICAgT25DaGFuZ2VzLFxyXG4gICAgT25EZXN0cm95LFxyXG4gICAgVmlld0NoaWxkLFxyXG4gICAgQ29udGVudENoaWxkXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5neEdhdWdlRXJyb3IgfSBmcm9tICcuL2dhdWdlLWVycm9yJztcclxuaW1wb3J0IHtcclxuICAgIGNsYW1wLFxyXG4gICAgY29lcmNlQm9vbGVhblByb3BlcnR5LFxyXG4gICAgY29lcmNlTnVtYmVyUHJvcGVydHksXHJcbiAgICBjc3NVbml0LFxyXG4gICAgaXNOdW1iZXJcclxufSBmcm9tICcuLi9jb21tb24vdXRpbCc7XHJcbmltcG9ydCB7IE5neEdhdWdlTGFiZWwsIE5neEdhdWdlVmFsdWUsIE5neEdhdWdlUHJlcGVuZCwgTmd4R2F1Z2VBcHBlbmQgfSBmcm9tICcuL2dhdWdlLWRpcmVjdGl2ZXMnO1xyXG5cclxuY29uc3QgREVGQVVMVFMgPSB7XHJcbiAgICBNSU46IDAsXHJcbiAgICBNQVg6IDEwMCxcclxuICAgIFRZUEU6ICdhcmNoJyxcclxuICAgIFRISUNLOiA0LFxyXG4gICAgRk9SRUdST1VORF9DT0xPUjogJ3JnYmEoMCwgMTUwLCAxMzYsIDEpJyxcclxuICAgIEJBQ0tHUk9VTkRfQ09MT1I6ICdyZ2JhKDAsIDAsIDAsIDAuMSknLFxyXG4gICAgQ0FQOiAnYnV0dCcsXHJcbiAgICBTSVpFOiAyMDBcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIE5neEdhdWdlVHlwZSA9ICdmdWxsJyB8ICdhcmNoJyB8ICdzZW1pJztcclxuZXhwb3J0IHR5cGUgTmd4R2F1Z2VDYXAgPSAncm91bmQnIHwgJ2J1dHQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ25neC1nYXVnZScsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ2dhdWdlLmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJ2dhdWdlLmNzcyddLFxyXG4gICAgaG9zdDoge1xyXG4gICAgICAgICdyb2xlJzogJ21ldGVyJyxcclxuICAgICAgICAnW2NsYXNzLm5neC1nYXVnZS1tZXRlcl0nOiAndHJ1ZScsXHJcbiAgICAgICAgJ1thdHRyLmFyaWEtdmFsdWVtaW5dJzogJ21pbicsXHJcbiAgICAgICAgJ1thdHRyLmFyaWEtdmFsdWVtYXhdJzogJ21heCcsXHJcbiAgICAgICAgJ1thdHRyLmFyaWEtdmFsdWVub3ddJzogJ3ZhbHVlJ1xyXG4gICAgfSxcclxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neEdhdWdlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2NhbnZhcycpIF9jYW52YXM6IEVsZW1lbnRSZWY7XHJcblxyXG4gICAgQENvbnRlbnRDaGlsZChOZ3hHYXVnZUxhYmVsKSBfbGFiZWxDaGlsZDogTmd4R2F1Z2VMYWJlbDtcclxuICAgIEBDb250ZW50Q2hpbGQoTmd4R2F1Z2VQcmVwZW5kKSBfcHJlcGVuZENoaWxkOiBOZ3hHYXVnZVByZXBlbmQ7XHJcbiAgICBAQ29udGVudENoaWxkKE5neEdhdWdlQXBwZW5kKSBfYXBwZW5kQ2hpbGQ6IE5neEdhdWdlQXBwZW5kO1xyXG4gICAgQENvbnRlbnRDaGlsZChOZ3hHYXVnZVZhbHVlKSBfdmFsdWVEaXNwbGF5Q2hpbGQ6IE5neEdhdWdlVmFsdWU7XHJcblxyXG4gICAgcHJpdmF0ZSBfc2l6ZTogbnVtYmVyID0gREVGQVVMVFMuU0laRTtcclxuICAgIHByaXZhdGUgX21pbjogbnVtYmVyID0gREVGQVVMVFMuTUlOO1xyXG4gICAgcHJpdmF0ZSBfbWF4OiBudW1iZXIgPSBERUZBVUxUUy5NQVg7XHJcbiAgICBwcml2YXRlIF9hbmltYXRlOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICBwcml2YXRlIF9pbml0aWFsaXplZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgcHJpdmF0ZSBfYW5pbWF0aW9uUmVxdWVzdElEOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBnZXQgc2l6ZSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fc2l6ZTsgfVxyXG4gICAgc2V0IHNpemUodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3NpemUgPSBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIGdldCBtaW4oKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX21pbjsgfVxyXG4gICAgc2V0IG1pbih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fbWluID0gY29lcmNlTnVtYmVyUHJvcGVydHkodmFsdWUsIERFRkFVTFRTLk1JTik7XHJcbiAgICB9XHJcbiAgICBASW5wdXQoKVxyXG4gICAgZ2V0IGFuaW1hdGUoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9hbmltYXRlOyB9XHJcbiAgICBzZXQgYW5pbWF0ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2FuaW1hdGUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpOyBcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKSBtYXg6IG51bWJlciA9IERFRkFVTFRTLk1BWDtcclxuXHJcbiAgICBASW5wdXQoKSB0eXBlOiBOZ3hHYXVnZVR5cGUgPSBERUZBVUxUUy5UWVBFIGFzIE5neEdhdWdlVHlwZTtcclxuXHJcbiAgICBASW5wdXQoKSBjYXA6IE5neEdhdWdlQ2FwID0gREVGQVVMVFMuQ0FQIGFzIE5neEdhdWdlQ2FwO1xyXG5cclxuICAgIEBJbnB1dCgpIHRoaWNrOiBudW1iZXIgPSBERUZBVUxUUy5USElDSztcclxuXHJcbiAgICBASW5wdXQoKSBsYWJlbDogc3RyaW5nO1xyXG5cclxuICAgIEBJbnB1dCgpIGFwcGVuZDogc3RyaW5nO1xyXG5cclxuICAgIEBJbnB1dCgpIHByZXBlbmQ6IHN0cmluZztcclxuXHJcbiAgICBASW5wdXQoKSBmb3JlZ3JvdW5kQ29sb3I6IHN0cmluZyA9IERFRkFVTFRTLkZPUkVHUk9VTkRfQ09MT1I7XHJcblxyXG4gICAgQElucHV0KCkgYmFja2dyb3VuZENvbG9yOiBzdHJpbmcgPSBERUZBVUxUUy5CQUNLR1JPVU5EX0NPTE9SO1xyXG5cclxuICAgIEBJbnB1dCgpIHRocmVzaG9sZHM6IE9iamVjdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcblxyXG4gICAgcHJpdmF0ZSBfdmFsdWU6IG51bWJlciA9IDA7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIGdldCB2YWx1ZSgpIHsgcmV0dXJuIHRoaXMuX3ZhbHVlOyB9XHJcbiAgICBzZXQgdmFsdWUodmFsOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl92YWx1ZSA9IGNvZXJjZU51bWJlclByb3BlcnR5KHZhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCkgZHVyYXRpb246IG51bWJlciA9IDEyMDA7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyKSB7IH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAgICAgY29uc3QgaXNUZXh0Q2hhbmdlZCA9IGNoYW5nZXNbJ2xhYmVsJ10gfHwgY2hhbmdlc1snYXBwZW5kJ10gfHwgY2hhbmdlc1sncHJlcGVuZCddO1xyXG4gICAgICAgIGNvbnN0IGlzRGF0YUNoYW5nZWQgPSBjaGFuZ2VzWyd2YWx1ZSddIHx8IGNoYW5nZXNbJ21pbiddIHx8IGNoYW5nZXNbJ21heCddO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgaWYgKGlzRGF0YUNoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBudiwgb3Y7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlc1sndmFsdWUnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG52ID0gY2hhbmdlc1sndmFsdWUnXS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgb3YgPSBjaGFuZ2VzWyd2YWx1ZSddLnByZXZpb3VzVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGUobnYsIG92KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICghaXNUZXh0Q2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5pdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3VwZGF0ZVNpemUoKSB7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0RWxlbWVudFN0eWxlKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3dpZHRoJywgY3NzVW5pdCh0aGlzLl9zaXplKSk7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0RWxlbWVudFN0eWxlKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2hlaWdodCcsIGNzc1VuaXQodGhpcy5fc2l6ZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fY2FudmFzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5fZGVzdHJveSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2dldEJvdW5kcyh0eXBlOiBOZ3hHYXVnZVR5cGUpIHtcclxuICAgICAgICBsZXQgaGVhZCwgdGFpbDtcclxuICAgICAgICBpZiAodHlwZSA9PSAnc2VtaScpIHtcclxuICAgICAgICAgICAgaGVhZCA9IE1hdGguUEk7XHJcbiAgICAgICAgICAgIHRhaWwgPSAyICogTWF0aC5QSTtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ2Z1bGwnKSB7XHJcbiAgICAgICAgICAgIGhlYWQgPSAxLjUgKiBNYXRoLlBJO1xyXG4gICAgICAgICAgICB0YWlsID0gMy41ICogTWF0aC5QSTtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdhcmNoJykge1xyXG4gICAgICAgICAgICBoZWFkID0gMC44ICogTWF0aC5QSTtcclxuICAgICAgICAgICAgdGFpbCA9IDIuMiAqIE1hdGguUEk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IGhlYWQsIHRhaWwgfTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9kcmF3U2hlbGwoc3RhcnQ6IG51bWJlciwgbWlkZGxlOiBudW1iZXIsIHRhaWw6IG51bWJlciwgY29sb3I6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBjZW50ZXIgPSB0aGlzLl9nZXRDZW50ZXIoKSxcclxuICAgICAgICAgICAgcmFkaXVzID0gdGhpcy5fZ2V0UmFkaXVzKCk7XHJcblxyXG4gICAgICAgIG1pZGRsZSA9IE1hdGgubWF4KG1pZGRsZSwgc3RhcnQpOyAvLyBuZXZlciBiZWxvdyAwJVxyXG4gICAgICAgIG1pZGRsZSA9IE1hdGgubWluKG1pZGRsZSwgdGFpbCk7IC8vIG5ldmVyIGV4Y2VlZCAxMDAlXHJcblxyXG4gICAgICAgIHRoaXMuX2NsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5fY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICB0aGlzLl9jb250ZXh0LnN0cm9rZVN0eWxlID0gdGhpcy5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgdGhpcy5fY29udGV4dC5hcmMoY2VudGVyLngsIGNlbnRlci55LCByYWRpdXMsIG1pZGRsZSwgdGFpbCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuX2NvbnRleHQuc3Ryb2tlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgdGhpcy5fY29udGV4dC5zdHJva2VTdHlsZSA9IGNvbG9yO1xyXG4gICAgICAgIHRoaXMuX2NvbnRleHQuYXJjKGNlbnRlci54LCBjZW50ZXIueSwgcmFkaXVzLCBzdGFydCwgbWlkZGxlLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5fY29udGV4dC5zdHJva2UoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY2xlYXIoKSB7XHJcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5fZ2V0V2lkdGgoKSwgdGhpcy5fZ2V0SGVpZ2h0KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2dldFdpZHRoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZ2V0SGVpZ2h0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZ2V0UmFkaXVzKCkge1xyXG4gICAgICAgIHZhciBjZW50ZXIgPSB0aGlzLl9nZXRDZW50ZXIoKTtcclxuICAgICAgICByZXR1cm4gY2VudGVyLnggLSB0aGlzLnRoaWNrO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2dldENlbnRlcigpIHtcclxuICAgICAgICB2YXIgeCA9IHRoaXMuX2dldFdpZHRoKCkgLyAyLFxyXG4gICAgICAgICAgICB5ID0gdGhpcy5fZ2V0SGVpZ2h0KCkgLyAyO1xyXG4gICAgICAgIHJldHVybiB7IHgsIHkgfTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9pbml0KCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSAodGhpcy5fY2FudmFzLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTENhbnZhc0VsZW1lbnQpLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZVNpemUoKTtcclxuICAgICAgICB0aGlzLl9zZXR1cFN0eWxlcygpO1xyXG4gICAgICAgIHRoaXMuX2NyZWF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2Rlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvblJlcXVlc3RJRCkge1xyXG4gICAgICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5fYW5pbWF0aW9uUmVxdWVzdElEKTtcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uUmVxdWVzdElEID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fY2xlYXIoKTtcclxuICAgICAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9zZXR1cFN0eWxlcygpIHtcclxuICAgICAgICB0aGlzLl9jb250ZXh0LmNhbnZhcy53aWR0aCA9IHRoaXMuc2l6ZTtcclxuICAgICAgICB0aGlzLl9jb250ZXh0LmNhbnZhcy5oZWlnaHQgPSB0aGlzLnNpemU7XHJcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lQ2FwID0gdGhpcy5jYXA7XHJcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lV2lkdGggPSB0aGlzLnRoaWNrO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2dldEZvcmVncm91bmRDb2xvckJ5UmFuZ2UodmFsdWUpIHtcclxuXHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBPYmplY3Qua2V5cyh0aGlzLnRocmVzaG9sZHMpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGlzTnVtYmVyKGl0ZW0pICYmIE51bWJlcihpdGVtKSA8PSB2YWx1ZSB9KVxyXG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gTnVtYmVyKGEpIC0gTnVtYmVyKGIpKVxyXG4gICAgICAgICAgICAucmV2ZXJzZSgpWzBdO1xyXG5cclxuICAgICAgICByZXR1cm4gbWF0Y2ggIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICA/IHRoaXMudGhyZXNob2xkc1ttYXRjaF0uY29sb3IgfHwgdGhpcy5mb3JlZ3JvdW5kQ29sb3JcclxuICAgICAgICAgICAgOiB0aGlzLmZvcmVncm91bmRDb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jcmVhdGUobnY/OiBudW1iZXIsIG92PzogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICB0eXBlID0gdGhpcy50eXBlLFxyXG4gICAgICAgICAgICBib3VuZHMgPSB0aGlzLl9nZXRCb3VuZHModHlwZSksXHJcbiAgICAgICAgICAgIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbixcclxuICAgICAgICAgICAgbWluID0gdGhpcy5taW4sXHJcbiAgICAgICAgICAgIG1heCA9IHRoaXMubWF4LFxyXG4gICAgICAgICAgICB2YWx1ZSA9IGNsYW1wKHRoaXMudmFsdWUsIHRoaXMubWluLCB0aGlzLm1heCksXHJcbiAgICAgICAgICAgIHN0YXJ0ID0gYm91bmRzLmhlYWQsXHJcbiAgICAgICAgICAgIHVuaXQgPSAoYm91bmRzLnRhaWwgLSBib3VuZHMuaGVhZCkgLyAobWF4IC0gbWluKSxcclxuICAgICAgICAgICAgZGlzcGxhY2VtZW50ID0gdW5pdCAqICh2YWx1ZSAtIG1pbiksXHJcbiAgICAgICAgICAgIHRhaWwgPSBib3VuZHMudGFpbCxcclxuICAgICAgICAgICAgY29sb3IgPSB0aGlzLl9nZXRGb3JlZ3JvdW5kQ29sb3JCeVJhbmdlKHZhbHVlKSxcclxuICAgICAgICAgICAgc3RhcnRUaW1lO1xyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYW5pbWF0ZSh0aW1lc3RhbXApIHtcclxuICAgICAgICAgICAgdGltZXN0YW1wID0gdGltZXN0YW1wIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICBsZXQgcnVudGltZSA9IHRpbWVzdGFtcCAtIHN0YXJ0VGltZTtcclxuICAgICAgICAgICAgbGV0IHByb2dyZXNzID0gTWF0aC5taW4ocnVudGltZSAvIGR1cmF0aW9uLCAxKTtcclxuICAgICAgICAgICAgbGV0IHByZXZpb3VzUHJvZ3Jlc3MgPSBvdiA/IG92ICogdW5pdCA6IDA7XHJcbiAgICAgICAgICAgIGxldCBtaWRkbGUgPSBzdGFydCArIHByZXZpb3VzUHJvZ3Jlc3MgKyBkaXNwbGFjZW1lbnQgKiBwcm9ncmVzcztcclxuXHJcbiAgICAgICAgICAgIHNlbGYuX2RyYXdTaGVsbChzdGFydCwgbWlkZGxlLCB0YWlsLCBjb2xvcik7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLl9hbmltYXRpb25SZXF1ZXN0SUQgJiYgKHJ1bnRpbWUgPCBkdXJhdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuX2FuaW1hdGlvblJlcXVlc3RJRCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKHRpbWVzdGFtcCkgPT4gYW5pbWF0ZSh0aW1lc3RhbXApKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzZWxmLl9hbmltYXRpb25SZXF1ZXN0SUQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9hbmltYXRlKSB7XHJcbiAgICAgICAgICAgIGlmIChudiAhPSB1bmRlZmluZWQgJiYgb3YgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGFjZW1lbnQgPSB1bml0ICogbnYgLSB1bml0ICogb3Y7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VsZi5fYW5pbWF0aW9uUmVxdWVzdElEID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgodGltZXN0YW1wKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSB0aW1lc3RhbXAgfHwgbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRlKHRpbWVzdGFtcCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNlbGYuX2RyYXdTaGVsbChzdGFydCwgc3RhcnQgKyBkaXNwbGFjZW1lbnQsIHRhaWwsIGNvbG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdXBkYXRlKG52OiBudW1iZXIsIG92OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9jbGVhcigpO1xyXG4gICAgICAgIHRoaXMuX2NyZWF0ZShudiwgb3YpO1xyXG4gICAgfVxyXG5cclxufSJdfQ==