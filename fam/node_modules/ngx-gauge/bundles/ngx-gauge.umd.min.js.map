{"version":3,"sources":["ng://ngx-gauge/common/util.ts","ng://ngx-gauge/gauge/gauge-directives.ts","ng://ngx-gauge/gauge/gauge.ts","ng://ngx-gauge/ngx-gauge.module.ts"],"names":["coerceNumberProperty","value","fallbackValue","isNaN","parseFloat","Number","cssUnit","NgxGaugeAppend","Directive","args","selector","exportAs","NgxGaugePrepend","NgxGaugeValue","NgxGaugeLabel","DEFAULTS","NgxGauge","_elementRef","_renderer","this","_size","_min","_max","_animate","_initialized","_animationRequestID","ariaLabel","ariaLabelledby","type","cap","thick","foregroundColor","backgroundColor","thresholds","Object","create","_value","duration","defineProperty","prototype","coerceBooleanProperty","val","ngOnChanges","changes","isCanvasPropertyChanged","isDataChanged","nv","ov","currentValue","previousValue","_update","_destroy","_init","_updateSize","setElementStyle","nativeElement","_canvas","width","size","height","ngAfterViewInit","ngOnDestroy","_getBounds","head","tail","Math","PI","_drawShell","start","middle","color","center","_getCenter","radius","_getRadius","max","min","_clear","_context","beginPath","strokeStyle","arc","x","y","stroke","clearRect","_getWidth","_getHeight","getContext","_setupStyles","_create","window","cancelAnimationFrame","lineCap","lineWidth","_getForegroundColorByRange","match","keys","filter","item","isNumber","undefined","sort","a","b","reverse","startTime","self","bounds","clamp","unit","displacement","requestAnimationFrame","timestamp","animate","runtime","Date","getTime","progress","Component","template","host","role","aria-readonly","[class.ngx-gauge-meter]","[attr.aria-valuemin]","[attr.aria-valuemax]","[attr.aria-valuenow]","[attr.aria-label]","[attr.aria-labelledby]","encapsulation","ViewEncapsulation","None","ElementRef","Renderer","ViewChild","ContentChild","Input","NgxGaugeModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["export function clamp(value: number, min: number, max: number): number {\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\nexport function coerceBooleanProperty(value: any): boolean {\r\n    return value != null && `${value}` !== 'false';\r\n}\r\nexport function coerceNumberProperty(value: any, fallbackValue: number = 0): number {\r\n    return isNaN(parseFloat(value)) || isNaN(Number(value)) ? fallbackValue : Number(value);\r\n}\r\nexport function cssUnit(value: number) {\r\n    return `${value}px`;\r\n}\r\nexport function isNumber(value: string) {\r\n    return value != undefined && !isNaN(parseFloat(value)) && !isNaN(Number(value));\r\n}","import { Directive } from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-append\",\r\n  exportAs: \"ngxGaugeAppend\"\r\n})\r\nexport class NgxGaugeAppend {}\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-prepend\",\r\n  exportAs: \"ngxGaugePrepend\"\r\n})\r\nexport class NgxGaugePrepend {}\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-value\",\r\n  exportAs: \"ngxGaugeValue\"\r\n})\r\nexport class NgxGaugeValue {}\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-label\",\r\n  exportAs: \"ngxGaugeLabel\"\r\n})\r\nexport class NgxGaugeLabel {}\r\n","import {\r\n    Component,\r\n    Input,\r\n    SimpleChanges,\r\n    ViewEncapsulation,\r\n    Renderer,\r\n    AfterViewInit,\r\n    ElementRef,\r\n    OnChanges,\r\n    OnDestroy,\r\n    ViewChild,\r\n    ContentChild\r\n} from '@angular/core';\r\nimport { NgxGaugeError } from './gauge-error';\r\nimport {\r\n    clamp,\r\n    coerceBooleanProperty,\r\n    coerceNumberProperty,\r\n    cssUnit,\r\n    isNumber\r\n} from '../common/util';\r\nimport { NgxGaugeLabel, NgxGaugeValue, NgxGaugePrepend, NgxGaugeAppend } from './gauge-directives';\r\n\r\nconst DEFAULTS = {\r\n    MIN: 0,\r\n    MAX: 100,\r\n    TYPE: 'arch',\r\n    THICK: 4,\r\n    FOREGROUND_COLOR: 'rgba(0, 150, 136, 1)',\r\n    BACKGROUND_COLOR: 'rgba(0, 0, 0, 0.1)',\r\n    CAP: 'butt',\r\n    SIZE: 200\r\n};\r\n\r\nexport type NgxGaugeType = 'full' | 'arch' | 'semi';\r\nexport type NgxGaugeCap = 'round' | 'butt';\r\n\r\n@Component({\r\n    selector: 'ngx-gauge',\r\n    templateUrl: 'gauge.html',\r\n    styleUrls: ['gauge.css'],\r\n    host: {\r\n        'role': 'slider',\r\n        'aria-readonly': 'true',\r\n        '[class.ngx-gauge-meter]': 'true',\r\n        '[attr.aria-valuemin]': 'min',\r\n        '[attr.aria-valuemax]': 'max',\r\n        '[attr.aria-valuenow]': 'value',\r\n        '[attr.aria-label]': 'ariaLabel',\r\n        '[attr.aria-labelledby]': 'ariaLabelledby'\r\n\r\n    },\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxGauge implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    @ViewChild('canvas') _canvas: ElementRef;\r\n\r\n    @ContentChild(NgxGaugeLabel) _labelChild: NgxGaugeLabel;\r\n    @ContentChild(NgxGaugePrepend) _prependChild: NgxGaugePrepend;\r\n    @ContentChild(NgxGaugeAppend) _appendChild: NgxGaugeAppend;\r\n    @ContentChild(NgxGaugeValue) _valueDisplayChild: NgxGaugeValue;\r\n\r\n    private _size: number = DEFAULTS.SIZE;\r\n    private _min: number = DEFAULTS.MIN;\r\n    private _max: number = DEFAULTS.MAX;\r\n    private _animate: boolean = true;\r\n\r\n    private _initialized: boolean = false;\r\n    private _context: CanvasRenderingContext2D;\r\n    private _animationRequestID: number = 0;\r\n\r\n    @Input('aria-label') ariaLabel: string = '';\r\n\r\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\r\n\r\n    @Input()\r\n    get size(): number { return this._size; }\r\n    set size(value: number) {\r\n        this._size = coerceNumberProperty(value);\r\n    }\r\n\r\n    @Input()\r\n    get min(): number { return this._min; }\r\n    set min(value: number) {\r\n        this._min = coerceNumberProperty(value, DEFAULTS.MIN);\r\n    }\r\n    @Input()\r\n    get animate(): boolean { return this._animate; }\r\n    set animate(value) {\r\n        this._animate = coerceBooleanProperty(value);\r\n    }\r\n\r\n    @Input()\r\n    get max(): number { return this._max; }\r\n    set max(value: number) {\r\n        this._max = coerceNumberProperty(value, DEFAULTS.MAX);\r\n    }\r\n\r\n    @Input() type: NgxGaugeType = DEFAULTS.TYPE as NgxGaugeType;\r\n\r\n    @Input() cap: NgxGaugeCap = DEFAULTS.CAP as NgxGaugeCap;\r\n\r\n    @Input() thick: number = DEFAULTS.THICK;\r\n\r\n    @Input() label: string;\r\n\r\n    @Input() append: string;\r\n\r\n    @Input() prepend: string;\r\n\r\n    @Input() foregroundColor: string = DEFAULTS.FOREGROUND_COLOR;\r\n\r\n    @Input() backgroundColor: string = DEFAULTS.BACKGROUND_COLOR;\r\n\r\n    @Input() thresholds: Object = Object.create(null);\r\n\r\n    private _value: number = 0;\r\n\r\n    @Input()\r\n    get value() { return this._value; }\r\n    set value(val: number) {\r\n        this._value = coerceNumberProperty(val);\r\n    }\r\n\r\n    @Input() duration: number = 1200;\r\n\r\n    constructor(private _elementRef: ElementRef, private _renderer: Renderer) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const isCanvasPropertyChanged = changes['thick'] || changes['type'] || changes['cap'] || changes['size'];\r\n        const isDataChanged = changes['value'] || changes['min'] || changes['max'];\r\n\r\n        if (this._initialized) {\r\n            if (isDataChanged) {\r\n                let nv, ov;\r\n                if (changes['value']) {\r\n                    nv = changes['value'].currentValue;\r\n                    ov = changes['value'].previousValue;\r\n                }\r\n                this._update(nv, ov);\r\n            } \r\n            if (isCanvasPropertyChanged) {\r\n                this._destroy();\r\n                this._init();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateSize() {\r\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'width', cssUnit(this._size));\r\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'height', cssUnit(this._size));\r\n        this._canvas.nativeElement.width = this.size;\r\n        this._canvas.nativeElement.height = this.size;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this._canvas) {\r\n            this._init();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._destroy();\r\n    }\r\n\r\n    private _getBounds(type: NgxGaugeType) {\r\n        let head, tail;\r\n        if (type == 'semi') {\r\n            head = Math.PI;\r\n            tail = 2 * Math.PI;\r\n        } else if (type == 'full') {\r\n            head = 1.5 * Math.PI;\r\n            tail = 3.5 * Math.PI;\r\n        } else if (type === 'arch') {\r\n            head = 0.8 * Math.PI;\r\n            tail = 2.2 * Math.PI;\r\n        }\r\n        return { head, tail };\r\n    }\r\n\r\n    private _drawShell(start: number, middle: number, tail: number, color: string) {\r\n        let center = this._getCenter(),\r\n            radius = this._getRadius();\r\n\r\n        middle = Math.max(middle, start); // never below 0%\r\n        middle = Math.min(middle, tail); // never exceed 100%\r\n        if (this._initialized) {\r\n            this._clear();\r\n            this._context.beginPath();\r\n            this._context.strokeStyle = this.backgroundColor;\r\n            this._context.arc(center.x, center.y, radius, middle, tail, false);\r\n            this._context.stroke();\r\n\r\n            this._context.beginPath();\r\n            this._context.strokeStyle = color;\r\n            this._context.arc(center.x, center.y, radius, start, middle, false);\r\n            this._context.stroke();\r\n        }\r\n    }\r\n\r\n    private _clear() {\r\n        this._context.clearRect(0, 0, this._getWidth(), this._getHeight());\r\n    }\r\n\r\n    private _getWidth() {\r\n        return this.size;\r\n    }\r\n\r\n    private _getHeight() {\r\n        return this.size;\r\n    }\r\n\r\n    private _getRadius() {\r\n        var center = this._getCenter();\r\n        return center.x - this.thick;\r\n    }\r\n\r\n    private _getCenter() {\r\n        var x = this._getWidth() / 2,\r\n            y = this._getHeight() / 2;\r\n        return { x, y };\r\n    }\r\n\r\n    private _init() {\r\n        this._context = (this._canvas.nativeElement as HTMLCanvasElement).getContext('2d');\r\n        this._initialized = true;\r\n        this._updateSize();\r\n        this._setupStyles();\r\n        this._create();\r\n    }\r\n\r\n    private _destroy() {\r\n        if (this._animationRequestID) {\r\n            window.cancelAnimationFrame(this._animationRequestID);\r\n            this._animationRequestID = 0;\r\n        }\r\n        this._clear();\r\n        this._context = null;\r\n        this._initialized = false;\r\n    }\r\n\r\n    private _setupStyles() {\r\n        this._context.lineCap = this.cap;\r\n        this._context.lineWidth = this.thick;\r\n    }\r\n\r\n    private _getForegroundColorByRange(value) {\r\n\r\n        const match = Object.keys(this.thresholds)\r\n            .filter(function (item) { return isNumber(item) && Number(item) <= value })\r\n            .sort((a, b) => Number(a) - Number(b))\r\n            .reverse()[0];\r\n\r\n        return match !== undefined\r\n            ? this.thresholds[match].color || this.foregroundColor\r\n            : this.foregroundColor;\r\n    }\r\n\r\n    private _create(nv?: number, ov?: number) {\r\n        let self = this,\r\n            type = this.type,\r\n            bounds = this._getBounds(type),\r\n            duration = this.duration,\r\n            min = this.min,\r\n            max = this.max,\r\n            value = clamp(this.value, this.min, this.max),\r\n            start = bounds.head,\r\n            unit = (bounds.tail - bounds.head) / (max - min),\r\n            displacement = unit * (value - min),\r\n            tail = bounds.tail,\r\n            color = this._getForegroundColorByRange(value),\r\n            startTime;\r\n\r\n        if (self._animationRequestID) {\r\n            window.cancelAnimationFrame(self._animationRequestID);\r\n        }\r\n\r\n        function animate(timestamp) {\r\n            timestamp = timestamp || new Date().getTime();\r\n            let runtime = timestamp - startTime;\r\n            let progress = Math.min(runtime / duration, 1);\r\n            let previousProgress = ov ? (ov - min) * unit : 0;\r\n            let middle = start + previousProgress + displacement * progress;\r\n\r\n            self._drawShell(start, middle, tail, color);\r\n            if (self._animationRequestID && (runtime < duration)) {\r\n                self._animationRequestID = window.requestAnimationFrame((timestamp) => animate(timestamp));\r\n            } else {\r\n                window.cancelAnimationFrame(self._animationRequestID);\r\n            }\r\n        }\r\n        if (this._animate) {\r\n            if (nv != undefined && ov != undefined) {\r\n                displacement = unit * nv - unit * ov;\r\n            }\r\n            self._animationRequestID = window.requestAnimationFrame((timestamp) => {\r\n                startTime = timestamp || new Date().getTime();\r\n                animate(startTime);\r\n            });\r\n        } else {\r\n            self._drawShell(start, start + displacement, tail, color);\r\n        }\r\n    }\r\n\r\n    private _update(nv: number, ov: number) {\r\n        this._clear();\r\n        this._create(nv, ov);\r\n    }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxGauge } from './gauge/gauge';\r\nimport { NgxGaugeLabel, NgxGaugeValue, NgxGaugePrepend, NgxGaugeAppend } from './gauge/gauge-directives';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [NgxGauge, NgxGaugeAppend, NgxGaugePrepend, NgxGaugeValue, NgxGaugeLabel],\r\n  exports: [NgxGauge, NgxGaugeAppend, NgxGaugePrepend, NgxGaugeValue, NgxGaugeLabel]\r\n})\r\nexport class NgxGaugeModule { }"]}