{"version":3,"sources":["ng://ngx-gauge/common/util.ts","ng://ngx-gauge/gauge/gauge-directives.ts","ng://ngx-gauge/gauge/gauge.ts","ng://ngx-gauge/ngx-gauge.module.ts"],"names":["coerceNumberProperty","value","fallbackValue","isNaN","parseFloat","Number","cssUnit","NgxGaugeAppend","Directive","args","selector","exportAs","NgxGaugePrepend","NgxGaugeValue","NgxGaugeLabel","DEFAULTS","NgxGauge","_elementRef","_renderer","this","_size","_min","_max","_animate","_initialized","_animationRequestID","max","type","cap","thick","foregroundColor","backgroundColor","thresholds","Object","create","_value","duration","defineProperty","prototype","coerceBooleanProperty","val","ngOnChanges","changes","isTextChanged","isDataChanged","nv","ov","currentValue","previousValue","_update","_destroy","_init","_updateSize","setElementStyle","nativeElement","ngAfterViewInit","_canvas","ngOnDestroy","_getBounds","head","tail","Math","PI","_drawShell","start","middle","color","center","_getCenter","radius","_getRadius","min","_clear","_context","beginPath","strokeStyle","arc","x","y","stroke","clearRect","_getWidth","_getHeight","size","getContext","_setupStyles","_create","window","cancelAnimationFrame","canvas","width","height","lineCap","lineWidth","_getForegroundColorByRange","match","keys","filter","item","isNumber","undefined","sort","a","b","reverse","startTime","self","bounds","clamp","unit","displacement","requestAnimationFrame","timestamp","Date","getTime","animate","runtime","progress","Component","template","host","role","[class.ngx-gauge-meter]","[attr.aria-valuemin]","[attr.aria-valuemax]","[attr.aria-valuenow]","encapsulation","ViewEncapsulation","None","ElementRef","Renderer","ViewChild","ContentChild","Input","NgxGaugeModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["export function clamp(value: number, min: number, max: number): number {\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\nexport function coerceBooleanProperty(value: any): boolean {\r\n    return value != null && `${value}` !== 'false';\r\n}\r\nexport function coerceNumberProperty(value: any, fallbackValue: number = 0): number {\r\n    return isNaN(parseFloat(value)) || isNaN(Number(value)) ? fallbackValue : Number(value);\r\n}\r\nexport function cssUnit(value: number) {\r\n    return `${value}px`;\r\n}\r\nexport function isNumber(value: string) {\r\n    return value != undefined && !isNaN(parseFloat(value)) && !isNaN(Number(value));\r\n}","import { Directive } from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-append\",\r\n  exportAs: \"ngxGaugeAppend\"\r\n})\r\nexport class NgxGaugeAppend {}\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-prepend\",\r\n  exportAs: \"ngxGaugePrepend\"\r\n})\r\nexport class NgxGaugePrepend {}\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-value\",\r\n  exportAs: \"ngxGaugeValue\"\r\n})\r\nexport class NgxGaugeValue {}\r\n\r\n@Directive({\r\n  selector: \"ngx-gauge-label\",\r\n  exportAs: \"ngxGaugeLabel\"\r\n})\r\nexport class NgxGaugeLabel {}\r\n","import {\r\n    Component,\r\n    Input,\r\n    SimpleChanges,\r\n    ViewEncapsulation,\r\n    Renderer,\r\n    AfterViewInit,\r\n    ElementRef,\r\n    OnChanges,\r\n    OnDestroy,\r\n    ViewChild,\r\n    ContentChild\r\n} from '@angular/core';\r\nimport { NgxGaugeError } from './gauge-error';\r\nimport {\r\n    clamp,\r\n    coerceBooleanProperty,\r\n    coerceNumberProperty,\r\n    cssUnit,\r\n    isNumber\r\n} from '../common/util';\r\nimport { NgxGaugeLabel, NgxGaugeValue, NgxGaugePrepend, NgxGaugeAppend } from './gauge-directives';\r\n\r\nconst DEFAULTS = {\r\n    MIN: 0,\r\n    MAX: 100,\r\n    TYPE: 'arch',\r\n    THICK: 4,\r\n    FOREGROUND_COLOR: 'rgba(0, 150, 136, 1)',\r\n    BACKGROUND_COLOR: 'rgba(0, 0, 0, 0.1)',\r\n    CAP: 'butt',\r\n    SIZE: 200\r\n};\r\n\r\nexport type NgxGaugeType = 'full' | 'arch' | 'semi';\r\nexport type NgxGaugeCap = 'round' | 'butt';\r\n\r\n@Component({\r\n    selector: 'ngx-gauge',\r\n    templateUrl: 'gauge.html',\r\n    styleUrls: ['gauge.css'],\r\n    host: {\r\n        'role': 'meter',\r\n        '[class.ngx-gauge-meter]': 'true',\r\n        '[attr.aria-valuemin]': 'min',\r\n        '[attr.aria-valuemax]': 'max',\r\n        '[attr.aria-valuenow]': 'value'\r\n    },\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxGauge implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    @ViewChild('canvas') _canvas: ElementRef;\r\n\r\n    @ContentChild(NgxGaugeLabel) _labelChild: NgxGaugeLabel;\r\n    @ContentChild(NgxGaugePrepend) _prependChild: NgxGaugePrepend;\r\n    @ContentChild(NgxGaugeAppend) _appendChild: NgxGaugeAppend;\r\n    @ContentChild(NgxGaugeValue) _valueDisplayChild: NgxGaugeValue;\r\n\r\n    private _size: number = DEFAULTS.SIZE;\r\n    private _min: number = DEFAULTS.MIN;\r\n    private _max: number = DEFAULTS.MAX;\r\n    private _animate: boolean = true;\r\n\r\n    private _initialized: boolean = false;\r\n    private _context: CanvasRenderingContext2D;\r\n    private _animationRequestID: number = 0;\r\n\r\n    @Input()\r\n    get size(): number { return this._size; }\r\n    set size(value: number) {\r\n        this._size = coerceNumberProperty(value);\r\n    }\r\n\r\n    @Input()\r\n    get min(): number { return this._min; }\r\n    set min(value: number) {\r\n        this._min = coerceNumberProperty(value, DEFAULTS.MIN);\r\n    }\r\n    @Input()\r\n    get animate(): boolean { return this._animate; }\r\n    set animate(value) {\r\n        this._animate = coerceBooleanProperty(value); \r\n    }\r\n\r\n    @Input() max: number = DEFAULTS.MAX;\r\n\r\n    @Input() type: NgxGaugeType = DEFAULTS.TYPE as NgxGaugeType;\r\n\r\n    @Input() cap: NgxGaugeCap = DEFAULTS.CAP as NgxGaugeCap;\r\n\r\n    @Input() thick: number = DEFAULTS.THICK;\r\n\r\n    @Input() label: string;\r\n\r\n    @Input() append: string;\r\n\r\n    @Input() prepend: string;\r\n\r\n    @Input() foregroundColor: string = DEFAULTS.FOREGROUND_COLOR;\r\n\r\n    @Input() backgroundColor: string = DEFAULTS.BACKGROUND_COLOR;\r\n\r\n    @Input() thresholds: Object = Object.create(null);\r\n\r\n    private _value: number = 0;\r\n\r\n    @Input()\r\n    get value() { return this._value; }\r\n    set value(val: number) {\r\n        this._value = coerceNumberProperty(val);\r\n    }\r\n\r\n    @Input() duration: number = 1200;\r\n\r\n    constructor(private _elementRef: ElementRef, private _renderer: Renderer) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const isTextChanged = changes['label'] || changes['append'] || changes['prepend'];\r\n        const isDataChanged = changes['value'] || changes['min'] || changes['max'];\r\n\r\n        if (this._initialized) {\r\n            if (isDataChanged) {\r\n                let nv, ov;\r\n                if (changes['value']) {\r\n                    nv = changes['value'].currentValue;\r\n                    ov = changes['value'].previousValue;\r\n                }\r\n                this._update(nv, ov);\r\n            } else if (!isTextChanged) {\r\n                this._destroy();\r\n                this._init();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateSize() {\r\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'width', cssUnit(this._size));\r\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'height', cssUnit(this._size));\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this._canvas) {\r\n            this._init();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._destroy();\r\n    }\r\n\r\n    private _getBounds(type: NgxGaugeType) {\r\n        let head, tail;\r\n        if (type == 'semi') {\r\n            head = Math.PI;\r\n            tail = 2 * Math.PI;\r\n        } else if (type == 'full') {\r\n            head = 1.5 * Math.PI;\r\n            tail = 3.5 * Math.PI;\r\n        } else if (type === 'arch') {\r\n            head = 0.8 * Math.PI;\r\n            tail = 2.2 * Math.PI;\r\n        }\r\n        return { head, tail };\r\n    }\r\n\r\n    private _drawShell(start: number, middle: number, tail: number, color: string) {\r\n        let center = this._getCenter(),\r\n            radius = this._getRadius();\r\n\r\n        middle = Math.max(middle, start); // never below 0%\r\n        middle = Math.min(middle, tail); // never exceed 100%\r\n\r\n        this._clear();\r\n        this._context.beginPath();\r\n        this._context.strokeStyle = this.backgroundColor;\r\n        this._context.arc(center.x, center.y, radius, middle, tail, false);\r\n        this._context.stroke();\r\n\r\n        this._context.beginPath();\r\n        this._context.strokeStyle = color;\r\n        this._context.arc(center.x, center.y, radius, start, middle, false);\r\n        this._context.stroke();\r\n\r\n    }\r\n\r\n    private _clear() {\r\n        this._context.clearRect(0, 0, this._getWidth(), this._getHeight());\r\n    }\r\n\r\n    private _getWidth() {\r\n        return this.size;\r\n    }\r\n\r\n    private _getHeight() {\r\n        return this.size;\r\n    }\r\n\r\n    private _getRadius() {\r\n        var center = this._getCenter();\r\n        return center.x - this.thick;\r\n    }\r\n\r\n    private _getCenter() {\r\n        var x = this._getWidth() / 2,\r\n            y = this._getHeight() / 2;\r\n        return { x, y };\r\n    }\r\n\r\n    private _init() {\r\n        this._context = (this._canvas.nativeElement as HTMLCanvasElement).getContext('2d');\r\n        this._initialized = true;\r\n        this._updateSize();\r\n        this._setupStyles();\r\n        this._create();\r\n    }\r\n\r\n    private _destroy() {\r\n        if (this._animationRequestID) {\r\n            window.cancelAnimationFrame(this._animationRequestID);\r\n            this._animationRequestID = 0;\r\n        }\r\n        this._clear();\r\n        this._context = null;\r\n    }\r\n\r\n    private _setupStyles() {\r\n        this._context.canvas.width = this.size;\r\n        this._context.canvas.height = this.size;\r\n        this._context.lineCap = this.cap;\r\n        this._context.lineWidth = this.thick;\r\n    }\r\n\r\n    private _getForegroundColorByRange(value) {\r\n\r\n        const match = Object.keys(this.thresholds)\r\n            .filter(function (item) { return isNumber(item) && Number(item) <= value })\r\n            .sort((a, b) => Number(a) - Number(b))\r\n            .reverse()[0];\r\n\r\n        return match !== undefined\r\n            ? this.thresholds[match].color || this.foregroundColor\r\n            : this.foregroundColor;\r\n    }\r\n\r\n    private _create(nv?: number, ov?: number) {\r\n        let self = this,\r\n            type = this.type,\r\n            bounds = this._getBounds(type),\r\n            duration = this.duration,\r\n            min = this.min,\r\n            max = this.max,\r\n            value = clamp(this.value, this.min, this.max),\r\n            start = bounds.head,\r\n            unit = (bounds.tail - bounds.head) / (max - min),\r\n            displacement = unit * (value - min),\r\n            tail = bounds.tail,\r\n            color = this._getForegroundColorByRange(value),\r\n            startTime;\r\n\r\n\r\n        function animate(timestamp) {\r\n            timestamp = timestamp || new Date().getTime();\r\n            let runtime = timestamp - startTime;\r\n            let progress = Math.min(runtime / duration, 1);\r\n            let previousProgress = ov ? ov * unit : 0;\r\n            let middle = start + previousProgress + displacement * progress;\r\n\r\n            self._drawShell(start, middle, tail, color);\r\n            if (self._animationRequestID && (runtime < duration)) {\r\n                self._animationRequestID = window.requestAnimationFrame((timestamp) => animate(timestamp));\r\n            } else {\r\n                window.cancelAnimationFrame(self._animationRequestID);\r\n            }\r\n        }\r\n        if (this._animate) {\r\n            if (nv != undefined && ov != undefined) {\r\n                displacement = unit * nv - unit * ov;\r\n            }\r\n            self._animationRequestID = window.requestAnimationFrame((timestamp) => {\r\n                startTime = timestamp || new Date().getTime();\r\n                animate(timestamp);\r\n            });\r\n        } else {\r\n            self._drawShell(start, start + displacement, tail, color);\r\n        }\r\n    }\r\n\r\n    private _update(nv: number, ov: number) {\r\n        this._clear();\r\n        this._create(nv, ov);\r\n    }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxGauge } from './gauge/gauge';\r\nimport { NgxGaugeLabel, NgxGaugeValue, NgxGaugePrepend, NgxGaugeAppend } from './gauge/gauge-directives';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [NgxGauge, NgxGaugeAppend, NgxGaugePrepend, NgxGaugeValue, NgxGaugeLabel],\r\n  exports: [NgxGauge, NgxGaugeAppend, NgxGaugePrepend, NgxGaugeValue, NgxGaugeLabel]\r\n})\r\nexport class NgxGaugeModule { }"]}